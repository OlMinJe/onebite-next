// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { ResolvingMetadata, ResolvingViewport } from 'next/types.js';
import type { AppRoutes, LayoutRoutes, ParamMap } from './routes.js';

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default:
    | React.ComponentType<{ params: Promise<ParamMap[Route]> } & any>
    | ((
        props: { params: Promise<ParamMap[Route]> } & any
      ) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>);
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[];
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any;
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any;
  metadata?: any;
  viewport?: any;
};

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default:
    | React.ComponentType<LayoutProps<Route>>
    | ((
        props: LayoutProps<Route>
      ) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>);
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[];
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any;
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any;
  metadata?: any;
  viewport?: any;
};

// Validate ../../src/app/(with-searchbar)/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/'>> = Specific;
  const handler = {} as typeof import('../../src/app/(with-searchbar)/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/(with-searchbar)/search/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/search'>> = Specific;
  const handler = {} as typeof import('../../src/app/(with-searchbar)/search/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/@modal/(.)book/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/book/[id]'>> = Specific;
  const handler = {} as typeof import('../../src/app/@modal/(.)book/[id]/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/book/[id]/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/book/[id]'>> = Specific;
  const handler = {} as typeof import('../../src/app/book/[id]/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/parallel/@feed/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/parallel'>> = Specific;
  const handler = {} as typeof import('../../src/app/parallel/@feed/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/parallel/@feed/setting/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/parallel/setting'>> = Specific;
  const handler = {} as typeof import('../../src/app/parallel/@feed/setting/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/parallel/@sidebar/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/parallel'>> = Specific;
  const handler = {} as typeof import('../../src/app/parallel/@sidebar/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/parallel/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<'/parallel'>> = Specific;
  const handler = {} as typeof import('../../src/app/parallel/page.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/(with-searchbar)/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<'/'>> = Specific;
  const handler = {} as typeof import('../../src/app/(with-searchbar)/layout.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<'/'>> = Specific;
  const handler = {} as typeof import('../../src/app/layout.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}

// Validate ../../src/app/parallel/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<'/parallel'>> = Specific;
  const handler = {} as typeof import('../../src/app/parallel/layout.jsx');
  type __Check = __IsExpected<typeof handler>;
  // @ts-ignore
  type __Unused = __Check;
}
